org: bcitgroup8
app: notes-app-api-app

# The service option signifies the String that identifies our project. Changing this would cause it to be a whole
# new project.
service: notes-app-api

# We are using the Serverless Framework which creates a single package containing all of our Lambda functions in
# our application. By setting individually to true we signify to the Framework to create a single package per
# Lambda function.
package:
  individually: true

plugins:
  - serverless-bundle 
  - serverless-offline
  - serverless-dotenv-plugin 

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-west-2

# POST requests are handled at the /notes endpoint
# Environment lets us define variables for our Lambda fucntion which are made available under
# process.env we use `process.env.tableName` . 
  environment:
    tableName: notes
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

# RoleStatements is our resource access rules. We are defining which resources the Lambda Functions we are utilizing
# will be allowed access.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # This is signifying that we are pointing to every DynamoDB table in the us-west-2 region.
      # We could be more precise by listing the table name.
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}